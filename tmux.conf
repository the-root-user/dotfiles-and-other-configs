# ==========================
# ===  General settings  ===
# ==========================

set -g default-terminal "screen-256color"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix key to C-a, easier to type
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1
# re-number the new pane if one gets closed
set -g renumber-windows on

# Enable mouse support
set -g mouse on

# Use the system clipboard
set -g set-clipboard on


# ==========================
# ===   Key bindings     ===
# ==========================

# bind space to cycle through available layouts
bind space select-layout

# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration 
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# bind -n C-0 selectw -t 0
bind 0 selectw -t 0
bind 1 selectw -t 1
bind 2 selectw -t 2
bind 3 selectw -t 3
bind 4 selectw -t 4
bind 5 selectw -t 5
bind 6 selectw -t 6
bind 7 selectw -t 7
bind 8 selectw -t 8
bind 9 selectw -t 9

# Prompt to rename window right after it's created
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind \\ split-window -fh -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind _ split-window -fv -c "#{pane_current_path}"
# resizing panes
bind -r C-j resize-pane -D 15
bind -r C-k resize-pane -U 15
bind -r C-h resize-pane -L 15
bind -r C-l resize-pane -R 15

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
bind + resize-pane -Z

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

## Copy/paste
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer

# =====================================
# ===     Themes and Appearence     ===
# =====================================

# Dracula Color Pallette
white='#f8f8f2'
gray='#44475a'
dark_gray='#282a36'
light_purple='#bd93f9'
dark_purple='#6272a4'
cyan='#8be9fd'
green='#50fa7b'
orange='#ffb86c'
red='#ff5555'
pink='#ff79c6'
yellow='#f1fa8c'

# =====================================
# ===   Appearence and status bar   ===
# =====================================

# window segments in status line
set -g window-status-separator " "
separator_powerline_left=""  # "      "
separator_powerline_right="" # "      "

# status format
setw -g window-status-format " #I:#W "
setw -g window-status-current-format "$separator_powerline_left #I:#W $separator_powerline_right"
#setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_left#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# # outline for active pane
# setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 5
#set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
wg_session="#[fg=$color_session_text] #S #[default]"
wg_date="#[fg=$color_secondary]%h %d %I:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
#wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
#wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

set -g status-left "[sess_#S]  "
set -g status-right "#{prefix_highlight} $wg_user_host | $wg_date #{online_status}"
#set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_loadavg} | $wg_user_host | $wg_date $wg_battery #{online_status}"

